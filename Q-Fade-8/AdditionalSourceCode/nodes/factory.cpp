/** Autogenerated Main.cpp. */

// =============================| Include only the DSP files  |=============================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// =======================| Now we can add the rest of the codebase |=======================

#include <JuceHeader.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"

// ===================================| Project Factory |===================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations -------------------------------------------------------------
		
		registerPolyNode<project::klp<1>, project::klp<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::khp<1>, project::khp<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::granular<1>, project::granular<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::g<1>, project::g<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Gran<1>, wrap::illegal_poly<project::Gran<1>>>();
		registerDataNode<project::d_networkdata>();
		registerDataNode<project::ftest_networkdata>();
		registerDataNode<project::Pan2_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::polymod3_networkdata>();
		registerDataNode<project::Stages_networkdata>();
		registerDataNode<project::StagesEQ_networkdata>();
		registerDataNode<project::StagesFilter_networkdata>();
		registerDataNode<project::StagesPan_networkdata>();
		registerDataNode<project::TableFilter_networkdata>();
		registerDataNode<project::track_networkdata>();
		registerDataNode<project::track2_networkdata>();
		registerDataNode<project::track3_networkdata>();
		registerDataNode<project::track4_networkdata>();
		registerDataNode<project::vec1_networkdata>();
		registerDataNode<project::vecEQ_networkdata>();
		registerDataNode<project::vecfade_networkdata>();
		registerDataNode<project::vecfade_networkdata>();
		registerDataNode<project::vecFilter_networkdata>();
		registerDataNode<project::vecGran_networkdata>();
		registerDataNode<project::vecP_networkdata>();
		registerDataNode<project::vecPan_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#pragma clang diagnostic pop


